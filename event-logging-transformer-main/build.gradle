def jarName = "event-logging-transformer-${versions.eventLogging}.jar"
def fatJarName = "event-logging-transformer-${versions.eventLogging}-all.jar"

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'ca.cutterslade.analyze'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

//required for application plugin
mainClassName = "event.logging.transformer.SchemaGenerator"

jar {
    manifest {
        attributes(
                "Implementation-Title": "event-Logging-transformer",
                "Implementation-Version": versions.eventLogging,
                "Main-Class" : mainClassName
        )
    }
    archiveName jarName
}

shadowJar {
    // Allows us to build fat jars with lots of files
    zip64 true

    archiveName fatJarName
}

// In this section you declare the dependencies for your production and test code
dependencies {
    
    // The production code uses the SLF4J logging API at compile time
    compile "org.slf4j:slf4j-api:${versions.slf4j}"
    compile "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson"
    compile "com.fasterxml.jackson.core:jackson-databind:$versions.jackson"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$versions.jackson"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$versions.jackson"

    runtime "net.sf.saxon:Saxon-HE:${versions.saxon}"
    runtime "ch.qos.logback:logback-classic:${versions.logback}"

    testCompile "junit:junit:${versions.junit}"
    testCompile "org.assertj:assertj-core:${versions.assertj}"
}

run {
    args = ['pipelines', '../event-logging.xsd']
}

runShadow {
    args = ['pipelines', '../event-logging.xsd']
}

task transformersDist(type: Zip) {
    archiveName "transformations-${versions.eventLogging}.zip"
    from 'pipelines/transformations'
}

//run the transformer code to build the schemas from the configured pipelines
tasks.build.dependsOn runShadow
tasks.build.dependsOn transformersDist

//Run the python script to validate all the version numbers in the schema file
task validateSchemaVersions(type: Exec) {
    workingDir '../'
    commandLine "python", "validateSchemaVersions.py", versions.eventLogging
}

tasks.compileJava.dependsOn validateSchemaVersions

// This means the reports from our integration tests won't over-write the reports from our unit tests.
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")

    //Use full logging for test exceptions so we can see where the failure occurred 
    testLogging {
        events "failed"
        exceptionFormat = 'full'
        showStackTraces = true
    }
}

clean {
    delete 'pipelines/generated'
}
